from dash import dcc, html, Output, Input, callback
import dash_bootstrap_components as dbc
from pages.portfolios.sharpe_figtbl import figtbl
from pages.formatting import Slider, Layout, text_style, ricegrey

title = "Sharpe ratios"
runtitle = None
chapter = "Portfolios"
chapter_url = "portfolios"
name = "sharpe"
urls = None

text = """ 
    The Sharpe ratio of a risky asset or portfolio is the ratio of its risk premium to its standard deviation.  The Sharpe
    ratio is unchanged if the asset or portfolio is combined with risk-free borrowing or saving.  The set of (std dev, mean)
    pairs generated by combining the asset or portfolio with borrowing or saving form a line with slope equal to the Sharpe
    ratio.  Higher Sharpe ratios represent greater mean-variance efficiency.  The portfolio selected with the sliders is
    indicated by the blue dot (the allocation to the third asset is 1 minus the sum of the other two).  The set of 
    (std dev, mean) pairs generated by combining
    the selected portfolio with borrowing or saving is shown as the blue line.  It is assumed that the saving rate 
    and the borrowing rate are the same.
    
    It is possible to enter a group of correlations that is physically 
    impossible.  Correlations $c_{12}$, $c_{13}$, and $c_{23}$ between any three 
    assets must satisfy the 
    inequalities $c_{23} \\ge c_{12}c_{13} - \sqrt{(1-c_{12}^2)(1-c_{13}^2)}$ 
    and $c_{23} \\le c_{12}c_{13} + \sqrt{(1-c_{12}^2)(1-c_{13}^2)}$.  Correlations
    that violate these inequalities are physically impossible.  If either of the inequalities holds as an 
    equality, then the assets are linearly related, meaning that one asset is perfectly correlated with a portfolio
    of the other two.  
    """

inputs = [name + "input" + str(i) for i in range(12)]

slider1 = Slider(
    "Expected return of asset 1",
    mn=5,
    mx=20,
    step=1,
    value=8,
    tick=5,
    kind="pct",
    name=inputs[0],
)
slider2 = Slider(
    "Expected return of asset 2",
    mn=5,
    mx=20,
    step=1,
    value=12,
    tick=5,
    kind="pct",
    name=inputs[1],
)
slider3 = Slider(
    "Expected return of asset 3",
    mn=5,
    mx=20,
    step=1,
    value=12,
    tick=5,
    kind="pct",
    name=inputs[2],
)
slider4 = Slider(
    "Standard deviation of asset 1",
    mn=5,
    mx=45,
    step=1,
    value=15,
    tick=10,
    kind="pct",
    name=inputs[3],
)
slider5 = Slider(
    "Standard deviation of asset 2",
    mn=5,
    mx=45,
    step=1,
    value=25,
    tick=10,
    kind="pct",
    name=inputs[4],
)
slider6 = Slider(
    "Standard deviation of asset 3",
    mn=5,
    mx=45,
    step=1,
    value=35,
    tick=10,
    kind="pct",
    name=inputs[5],
)
slider7 = Slider(
    "Correlation of asset 1 with asset 2",
    mn=-100,
    mx=100,
    step=1,
    value=15,
    tick=50,
    kind="pct",
    name=inputs[6],
)
slider8 = Slider(
    "Correlation of asset 1 with asset 3",
    mn=-100,
    mx=100,
    step=1,
    value=60,
    tick=50,
    kind="pct",
    name=inputs[7],
)
slider9 = Slider(
    "Correlation of asset 2 with asset 3",
    mn=-100,
    mx=100,
    step=1,
    value=30,
    tick=50,
    kind="pct",
    name=inputs[8],
)

slider10 = Slider(
    "Allocation to Asset 1",
    mn=-100,
    mx=100,
    step=1,
    value=50,
    tick=25,
    kind="pct",
    name=inputs[9],
)

slider11 = Slider(
    "Allocation to Asset 2",
    mn=-100,
    mx=100,
    step=1,
    value=0,
    tick=25,
    kind="pct",
    name=inputs[10],
)

slider12 = Slider(
    "Risk-Free Rate",
    mn=0,
    mx=5,
    step=0.1,
    value=2,
    tick=1,
    kind="pct",
    name=inputs[11],
)

graph = dcc.Graph(id=name + "fig")

badge = html.H5(dbc.Badge("Results", className="ms-1"))
badge = dbc.Col(badge, width={"size": 4, "offset": 5})
badge = dbc.Row(badge)

left   = dbc.Col([slider1, slider2, slider3], md=4)
middle = dbc.Col([slider4, slider5, slider6], md=4)
right  = dbc.Col([slider7, slider8, slider9], md=4)
row = dbc.Row([left, middle, right], align="center")

col1 = dbc.Col(
    html.Div('Correlations are physically possible and assets are not linearly related?'),
    width={'size': 6, 'offset': 2}
)
col2 = dbc.Col(
    html.Div(id=name+'PDCov', style=text_style),
    width={'size': 1}
)
row2 = dbc.Row([col1, col2])

left = dbc.Col(slider10, md=4)
mid = dbc.Col(slider11, md=4)
right = dbc.Col(slider12, md=4)
row3 = dbc.Row([left, mid, right])

body = html.Div([row, html.Hr(),
                 row2, html.Hr(), row3, html.Br(), graph])

layout = Layout(
    title=title,
    runtitle=runtitle,
    chapter=chapter,
    chapter_url=chapter_url,
    urls=urls,
    text=text,
    body=body,
)
lst = [Output(name + "fig", "figure"), Output(name + "PDCov", "children")] + [Input(i, "value") for i in inputs]


@callback(*lst)
def call(*args):
    return figtbl(*args)
